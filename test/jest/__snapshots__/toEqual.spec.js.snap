// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.toEqual() {pass: false} expect("Alice").not.toEqual({"asymmetricMatch": [Function asymmetricMatch]}) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>{\\"asymmetricMatch\\": [Function asymmetricMatch]}</>
Received:
  <red>\\"Alice\\"</>"
`;

exports[`.toEqual() {pass: false} expect("Eve").toEqual({"asymmetricMatch": [Function asymmetricMatch]}) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>{\\"asymmetricMatch\\": [Function asymmetricMatch]}</>
Received:
  <red>\\"Eve\\"</>"
`;

exports[`.toEqual() {pass: false} expect("abc").not.toEqual("abc") 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>\\"abc\\"</>
Received:
  <red>\\"abc\\"</>"
`;

exports[`.toEqual() {pass: false} expect("abcd").not.toEqual(StringContaining "bc") 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>StringContaining \\"bc\\"</>
Received:
  <red>\\"abcd\\"</>"
`;

exports[`.toEqual() {pass: false} expect("abcd").not.toEqual(StringMatching /bc/) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>StringMatching /bc/</>
Received:
  <red>\\"abcd\\"</>"
`;

exports[`.toEqual() {pass: false} expect("abd").toEqual(StringContaining "bc") 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>StringContaining \\"bc\\"</>
Received:
  <red>\\"abd\\"</>"
`;

exports[`.toEqual() {pass: false} expect("abd").toEqual(StringMatching /bc/i) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>StringMatching /bc/i</>
Received:
  <red>\\"abd\\"</>"
`;

exports[`.toEqual() {pass: false} expect("banana").toEqual("apple") 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>\\"apple\\"</>
Received:
  <red>\\"banana\\"</>"
`;

exports[`.toEqual() {pass: false} expect([1, 2, 3]).not.toEqual(ArrayContaining [2, 3]) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>ArrayContaining [2, 3]</>
Received:
  <red>[1, 2, 3]</>"
`;

exports[`.toEqual() {pass: false} expect([1, 3]).toEqual(ArrayContaining [1, 2]) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>ArrayContaining [1, 2]</>
Received:
  <red>[1, 3]</>

Difference:

<green>- Expected</>
<red>+ Received</>

<green>-ArrayContaining [</>
<red>+Array [</>
<dim>   1,
<green>-  2,</>
<red>+  3,</>
<dim> ]"
`;

exports[`.toEqual() {pass: false} expect([Function anonymous]).not.toEqual(Any<Function>) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>Any<Function></>
Received:
  <red>[Function anonymous]</>"
`;

exports[`.toEqual() {pass: false} expect({"a": 1, "b": [Function b], "c": true}).not.toEqual({"a": 1, "b": Any<Function>, "c": Anything}) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>{\\"a\\": 1, \\"b\\": Any<Function>, \\"c\\": Anything}</>
Received:
  <red>{\\"a\\": 1, \\"b\\": [Function b], \\"c\\": true}</>"
`;

exports[`.toEqual() {pass: false} expect({"a": 1, "b": 2}).not.toEqual(ObjectContaining {"a": 1}) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>ObjectContaining {\\"a\\": 1}</>
Received:
  <red>{\\"a\\": 1, \\"b\\": 2}</>"
`;

exports[`.toEqual() {pass: false} expect({"a": 1, "b": 2}).toEqual(ObjectContaining {"a": 2}) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>ObjectContaining {\\"a\\": 2}</>
Received:
  <red>{\\"a\\": 1, \\"b\\": 2}</>

Difference:

<green>- Expected</>
<red>+ Received</>

<green>-ObjectContaining {</>
<green>-  \\"a\\": 2,</>
<red>+Object {</>
<red>+  \\"a\\": 1,</>
<red>+  \\"b\\": 2,</>
<dim> }"
`;

exports[`.toEqual() {pass: false} expect({"a": 5}).toEqual({"b": 6}) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>{\\"b\\": 6}</>
Received:
  <red>{\\"a\\": 5}</>

Difference:

<green>- Expected</>
<red>+ Received</>

<dim> Object {
<green>-  \\"b\\": 6,</>
<red>+  \\"a\\": 5,</>
<dim> }"
`;

exports[`.toEqual() {pass: false} expect({"a": 99}).not.toEqual({"a": 99}) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>{\\"a\\": 99}</>
Received:
  <red>{\\"a\\": 99}</>"
`;

exports[`.toEqual() {pass: false} expect(0).toEqual(-0) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>-0</>
Received:
  <red>0</>

Difference:

<dim>Compared values have no visual difference."
`;

exports[`.toEqual() {pass: false} expect(1).not.toEqual(1) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>1</>
Received:
  <red>1</>"
`;

exports[`.toEqual() {pass: false} expect(1).toEqual(2) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>2</>
Received:
  <red>1</>"
`;

exports[`.toEqual() {pass: false} expect(1).toEqual(ArrayContaining [1, 2]) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>ArrayContaining [1, 2]</>
Received:
  <red>1</>

Difference:

  Comparing two different types of values. Expected <green>array</> but received <red>number</>."
`;

exports[`.toEqual() {pass: false} expect(Set {1, 2}).not.toEqual(Set {1, 2}) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>Set {1, 2}</>
Received:
  <red>Set {1, 2}</>"
`;

exports[`.toEqual() {pass: false} expect(Set {1, 2}).toEqual(Set {2, 1}) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>Set {2, 1}</>
Received:
  <red>Set {1, 2}</>

Difference:

<dim>Compared values have no visual difference."
`;

exports[`.toEqual() {pass: false} expect(false).toEqual(ObjectContaining {"a": 2}) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>ObjectContaining {\\"a\\": 2}</>
Received:
  <red>false</>

Difference:

  Comparing two different types of values. Expected <green>object</> but received <red>boolean</>."
`;

exports[`.toEqual() {pass: false} expect(null).toEqual(undefined) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>undefined</>
Received:
  <red>null</>

Difference:

  Comparing two different types of values. Expected <green>undefined</> but received <red>null</>."
`;

exports[`.toEqual() {pass: false} expect(true).not.toEqual(Anything) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>Anything</>
Received:
  <red>true</>"
`;

exports[`.toEqual() {pass: false} expect(true).not.toEqual(true) 1`] = `
"<dim>expect(<red>received</><dim>).not.toEqual(<green>expected</><dim>)

Expected value to not equal:
  <green>true</>
Received:
  <red>true</>"
`;

exports[`.toEqual() {pass: false} expect(true).toEqual(false) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>false</>
Received:
  <red>true</>"
`;

exports[`.toEqual() {pass: false} expect(undefined).toEqual(Any<Function>) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>Any<Function></>
Received:
  <red>undefined</>

Difference:

  Comparing two different types of values. Expected <green>function</> but received <red>undefined</>."
`;

exports[`.toEqual() {pass: false} expect(undefined).toEqual(Anything) 1`] = `
"<dim>expect(<red>received</><dim>).toEqual(<green>expected</><dim>)

Expected value to equal:
  <green>Anything</>
Received:
  <red>undefined</>"
`;
